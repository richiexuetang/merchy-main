### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Attribute {
  filterableInStoreFront: Boolean
  id: ID
  name: String
  slug: String
  visibleInStoreFront: Boolean
}

input AttributeInput {
  slug: String
  values: [String]
}

"""Attribute Input Type Enum"""
enum AttributeInputTypeEnum {
  COLUMN
  DATE
  DATE_TIME
  GRID
  NUMERIC
  PLAIN_TEXT
  RICH_TEXT
}

type AttributeValue {
  id: ID
  name: String
  plainText: String
  slug: String
  value: AttributeInputTypeEnum
}

type BreadCrumb {
  id: ID
  level: Int
  name: String
  url: String
}

type Category {
  breadCrumbs: [BreadCrumb]
  categoryId: String
  children: [Category]
  description: String
  filters: [Filters]
  id: ID
  level: Int
  name: String
  parentId: String
  path: String
  products: [Product]
  urlKey: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Edge {
  cursor: String
  node: Product
}

type Filters {
  displayType: String
  id: ID
  name: String
  values: [String]
}

type LevelCategories {
  categories: [Category]
}

type Market {
  id: ID
  lastSale: Int
  salesEver: Int
}

type Mutation {
  addProduct(brand: String!, categoryId: String, description: String, imageUrl: String!, model: String, name: String!, price: String!, primaryCategory: String, primaryTitle: String!, productCategory: String, secondaryTitle: String, title: String!, urlKey: String!): Product
  deleteProduct(id: String!): Product!
  signupUser(email: String!, password: String!, phonenumber: String!, username: String!): User
}

input Operators {
  in: String
  lt: Int
}

enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Product {
  attributes: [SelectedAttribute]
  brand: String
  breadCrumbs: [BreadCrumb]
  categoryId: String
  condition: String
  createdAt: DateTime
  description: String
  id: String
  imageUrl: String
  market: Market
  model: String
  name: String
  primaryCategory: String
  primaryTitle: String
  productCategory: String
  salesEver: Int
  secondaryTitle: String
  slug: String
  title: String
  traits: [Traits]
  variants: [Product]
}

type ProductConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ProductEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type ProductEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Product
}

input ProductFilterByInputType {
  gender: Operators
  price: Operators
  productCategory: Operators
}

input ProductFilterInput {
  attributes: [AttributeInput]
  categories: [String]
  search: String
}

input ProductOrder {
  direction: OrderDirection
  field: ProductOrderField
}

input ProductOrderByInputType {
  createdAt: Sort
  price: Sort
  salesEver: Sort
  updatedAt: Sort
}

enum ProductOrderField {
  createdAt
  price
  salesEver
}

type Query {
  categoryBrowse(categoryUrl: String!): Category
  categoryProducts(categoryUrlKey: String, skip: Int, take: Int): [Product]
  childrenCategory(id: String): [Category]
  filterProduct(filters: ProductFilterByInputType, orderBy: ProductOrderByInputType, skip: Int, take: Int): [Product]
  levelCategories(level: Int): [Category]
  product(productUrl: String!): Product
  productCollection(orderBy: ProductOrderByInputType, productCategory: String!, skip: Int, take: Int): [Product]
  products(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    filter: ProductFilterInput

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    orderBy: ProductOrder
  ): ProductConnection
  rootCategory(category: String!): Category
  users: [User]
  verticalBrowseCategory(category: String!): [Category]
}

type Response {
  edges: [Edge]
  pageInfo: PageInfo
}

type SelectedAttribute {
  attribute: Attribute
  attributeValues: [AttributeValue]
  id: ID
}

enum Sort {
  asc
  desc
}

type Traits {
  id: ID
  name: String
  value: String
  visible: String
}

type User {
  email: String
  id: Int
  password: String
  phonenumber: String
  purchaseHistory: [Int]
  recentlyViewed: [Int]
  username: String
}