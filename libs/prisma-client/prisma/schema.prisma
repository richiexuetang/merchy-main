generator client {
  provider = "prisma-client-js"
  output = "../src"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
}

model Category {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  description String?
  name        String
  level       Int
  path        String?
  slug        String      @unique
  breadCrumbs BreadCrumb[]
  products    Product[]
  parentId    String?
  parent      Category?    @relation("ParentChildren", fields: [parentId], references: [id])
  children    Category[]   @relation("ParentChildren")
  categoryPage CategoryPage?

  @@unique([id, slug])
}

model CategoryPage {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  headerDescription String? 
  bottomPageIntro String? 
  bottomPageParagraph String? 
  imageUrl  String? 
  locale  String? 
  category  Category @relation(fields: [categoryPageId], references: [id])
  categoryPageId  String @unique
}

model Product {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  name            String         @unique
  title           String         @unique
  slug            String         @unique
  variants        Product[]      @relation("Variants")
  variantsOf      Product[]      @relation("Variants")
  breadCrumbs     BreadCrumb[]
  market          Market?        @relation(fields: [marketId], references: [id])
  marketId        String? @unique
  category        Category       @relation(fields: [categoryId, categorySlug], references: [id, slug])
  categoryId      String
  categorySlug    String
  attributes      SelectedAttribute[]
  productType     ProductType @relation(fields: [productTypeId, productTypeSlug], references: [id, slug])
  productTypeId   String
  productTypeSlug String
  brand           String          
  description     String?
  primaryTitle    String
  secondaryTitle  String?
  model           String        @default("Unknown")
  primaryCategory String
  listingType     String         @default("Standard")
  condition       String      @default("New")
  media           ImageGallery?
  productDetails  ProductDetails?

  @@unique([id, slug])
}

model ProductDetails {
  id            String @id @default(uuid())
  releaseDate   DateTime?
  colorWay      String?
  style         String?
  description   String?
  retailPrice   Int? 
  product       Product? @relation(fields: [productId], references: [id])
  productId     String  @unique
}

model Market {
  id               String    @id @default(uuid())
  highestBid       Int?
  highestBidTime   DateTime?
  lowestBid        Int?
  lowestAsk        Int?
  lowestAskTime    DateTime?
  numberofAsks     Int?
  numberofBids     Int?
  annualHigh       Int?
  annualLow        Int?
  lastSale         Int?
  lastSaleDate     DateTime?
  pricePremium     Int?
  salesEver        Int?
  changePercentage Int?
  volatility       Float?
  price            Int
  product          Product?
}

model BreadCrumb {
  id       String     @id @default(uuid())
  category Category[]
  products Product[]
  level    Int
  name     String
  url      String     @unique
}

model ImageGallery {
  label         String?
  imageUrl      String
  smallImageUrl String?
  thumbUrl      String?
  product       Product @relation(fields: [productId], references: [id])
  productId     String  @unique
}

model ProductType {
  id                    String @id @default(uuid())
  name                  String 
  slug                  String
  productAttributes     Attribute[]
  products              Product[]

  @@unique([id, slug])
}

model SelectedAttribute {
  id                  String @id @default(uuid())
  attribute           Attribute @relation(fields: [attributeId, attributeSlug], references: [id, slug])
  attributeId         String
  attributeSlug       String 
  attributeValues     AttributeValue[]
  products            Product[]
}
model Attribute {
  id                  String @id @default(uuid())
  name                String 
  slug                String @unique
  productTypes        ProductType[]
  inputType           AttributeInputTypeEnum 
  visibleInStoreFront Boolean 
  filterableInStoreFront Boolean
  attributeValue             SelectedAttribute[]
  choices      AttributeValue[] 

  @@unique([id, slug])
}

model AttributeValue {
  id            String @id @default(uuid())
  name          String? 
  slug          String?
  value         AttributeInputTypeEnum
  plainText     String?
  selectedAttribute SelectedAttribute[]
  attribute     Attribute[]
  date          DateTime?
}

enum AttributeInputTypeEnum {
  NUMERIC 
  RICH_TEXT
  PLAIN_TEXT
  DATE 
  DATE_TIME
  COLUMN 
  GRID
}